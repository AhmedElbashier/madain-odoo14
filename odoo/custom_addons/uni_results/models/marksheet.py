

from odoo import models, fields, api, _
from odoo.exceptions import ValidationError


class OpMarksheetRegister(models.Model):
	_name = "marksheet.register"
	_inherit = ["mail.thread"]
	_description = "Marksheet Register"

	exam_id = fields.Many2one(
		'uni.exam.record',
		string='Exam Record',
		required=True, tracking=True,
		domain=[('state','=','done')]
	)
	end_level = fields.Boolean(related='exam_id.end_level')
	marksheet_line = fields.One2many(
		'marksheet.line', 'marksheet_reg_id', 'Marksheets')
	generated_date = fields.Date(
		'Generated Date', required=True,
		default=fields.Date.today(), tracking=True)
	generated_by = fields.Many2one(
		'res.users', 'Generated By',
		default=lambda self: self.env.uid,
		required=True, tracking=True)
	state = fields.Selection(
		[('draft', 'Draft'), ('calculated','Calculated'), ('validated', 'Validated'),
		 ('cancelled', 'Cancelled')], 'Status',
		default="draft", required=True, tracking=True)
	total_pass = fields.Integer(
		'Total Pass', compute='_compute_total_pass',
		tracking=True, store=True)
	total_failed = fields.Integer(
		'Total Fail', compute='_compute_total_failed',
		tracking=True, store=True)
	name = fields.Char('Marksheet Name', size=256, required=True,
					   tracking=True)
	active = fields.Boolean(default=True)
	program_id = fields.Many2one(
		'uni.faculty.program', 'Program', required=True, tracking=True)
	batch_id = fields.Many2one(
		'uni.faculty.department.batch', 'Batch', required=True, tracking=True)
	level_id = fields.Many2one(
		'uni.faculty.level', 'Level', required=True, tracking=True)
	semester_id = fields.Many2one(
		'uni.faculty.semester', "Term", required=True, tracking=True)


	_sql_constraints = [
	   ('unique_exam', 'unique (exam_id)',
	   "Sorry.. They are already a Marksheet for this Exam Record")
	]

	@api.onchange('exam_id')
	def det_exam_data(self):
		for rec in self:
			rec.program_id = rec.exam_id.program_id
			rec.level_id = rec.exam_id.level_id
			rec.semester_id = rec.exam_id.semester_id
			rec.batch_id = rec.exam_id.batch_id

	def action_calculate_result(self):
		print('------------------  in action_calculate_result')
		marksheet_line_id = self.env['marksheet.line']
		for rec in self:
			marksheet_id = rec.search([('exam_id','=',rec.exam_id.id),('id','!=',rec.id)])
			if marksheet_id:
				raise ValidationError(_('Sorry There is a calculated result for the selected exam record'))
			if rec.exam_id:
				print('--------------- in if')
				exam_lines = self.env['exam.exam'].search([('record_id','=',rec.exam_id.id)])
				attendees_lines = exam_lines.mapped('attendees_line')

				student_dict = {}
				for attendee in attendees_lines:  
					if attendee.student_id.id not in student_dict:
						student_dict[attendee.student_id.id] = []
					student_dict[attendee.student_id.id].append(attendee)

				for student in student_dict:
					marksheet_line_id = self.create_marksheet_line(student)

					for attendees_line in student_dict[student]:
						attendees_line.marksheet_line_id = marksheet_line_id

					#################### Subustitutionals ########################
					if rec.exam_id.is_substitutionals:
						main_exam_lines = self.env['exam.exam'].search([('record_id','=',rec.exam_id.main_exam.id)])
						main_attendees_lines = main_exam_lines.mapped('attendees_line')

						main_student_dict = {}
						for attendee in main_attendees_lines:  
							if attendee.student_id.id not in main_student_dict:
								main_student_dict[attendee.student_id.id] = []
							main_student_dict[attendee.student_id.id].append(attendee)

						self.create_main_attend_lines(student,marksheet_line_id,main_student_dict)
						
						student_exam_rec = self.env['uni.student.exam'].search([('student_id','=',student)])
						substitutional_subjects = student_exam_rec.substitutional_subjects
						ids = []
						for line in rec.marksheet_line.attendees_line:
							if line.subject.id in substitutional_subjects.ids:
								student_exam_rec.write({
									'substitutional_subjects':[(3,line.subject.id)]
									}) 

					#################### Supplements ########################
					if rec.exam_id.is_supplement:
						main_exam_lines = self.env['exam.exam'].search([('record_id','=',rec.exam_id.main_exam.id)])
						main_attendees_lines = main_exam_lines.mapped('attendees_line')
						if rec.exam_id.substitutionals_exam:
							substitutionals_exam_lines = self.env['exam.exam'].search([('record_id','=',rec.exam_id.substitutionals_exam.id)])
							substitutionals_attendees_lines = substitutionals_exam_lines.mapped('attendees_line')

						main_student_dict = {}
						for attendee in main_attendees_lines:  
							if attendee.student_id.id not in main_student_dict:
								main_student_dict[attendee.student_id.id] = []
							main_student_dict[attendee.student_id.id].append(attendee)

						if rec.exam_id.substitutionals_exam:
							substitutionals_student_dict = {}
							for attendee in substitutionals_attendees_lines:  
								if attendee.student_id.id not in substitutionals_student_dict:
									substitutionals_student_dict[attendee.student_id.id] = []
								substitutionals_student_dict[attendee.student_id.id].append(attendee)
						# print('\n\n\n')
						# print('==================== main_student_dict',main_student_dict)
						# print('==================== substitutionals_student_dict',substitutionals_student_dict)

						lines = marksheet_line_id.attendees_line
						for main_student in main_student_dict:
							if main_student == student:
								array = []
								for attend_line in main_student_dict[main_student]:
									for line in lines:
										if attend_line.subject.id != line.subject.id:
											if attend_line.subject_status not in ['fail','substitutional']:
												if attend_line not in array:
													array.append(attend_line)

								self.create_attend(array,marksheet_line_id)

						if rec.exam_id.substitutionals_exam:
							for substitutionals_student in substitutionals_student_dict:
								if substitutionals_student == student:
									array = []
									for attend_line in substitutionals_student_dict[substitutionals_student]:
										for line in lines:
											if attend_line.subject.id != line.subject.id:
												if attend_line.subject_status != 'fail':
													if attend_line not in array:
														array.append(attend_line)

									self.create_attend(array,marksheet_line_id)
							
						student_exam_rec = self.env['uni.student.exam'].search([('student_id','=',student)])
						supplement_subjects = student_exam_rec.supplement_subjects
						ids = []
						for line in rec.marksheet_line.attendees_line:
							if line.subject.id in supplement_subjects.ids:
								student_exam_rec.write({
									'supplement_subjects':[(3,line.subject.id)]
									}) 

				if self.exam_id.exam_type.exam_category == 'first_round' and self.exam_id.deprived_student_ids and not self.exam_id.is_substitutionals:
					self.calculate_deprived_result(exam_lines)
				rec.state = 'calculated'
	
	def calculate_deprived_result(self,exam_lines):
		marksheet_line_id = self.env['marksheet.line']
		deprived_student_ids = self.exam_id.mapped('deprived_student_ids')
		for student in deprived_student_ids:
			marksheet_line_id = self.create_marksheet_line(student.student_id.id)
			for line in exam_lines:
				self.env['exam.attendees'].create({
					'marksheet_line_id':marksheet_line_id.id,
					'exam_id':line.id,
					'student_id':student.student_id.id,
					'subject':line.subject_id.id,
					'subject_status':'deprived',
					'main':False,
					})



	def create_attend(self,array,marksheet_line_id):
		for attend_line in array:
			self.marksheet_line.attendees_line.create({
				'student_id':attend_line.student_id.id,
				'seeting_number':attend_line.seeting_number,
				'university_id':attend_line.university_id,
				'marksheet_line_id':marksheet_line_id.id,
				'subject':attend_line.subject.id,
				'status':attend_line.status,
				'violation_id':attend_line.violation_id,
				'attendees_degree':attend_line.attendees_degree,
				'practical_degree':attend_line.practical_degree,
				'year_work_degree':attend_line.year_work_degree,
				'final_exam_degree':attend_line.final_exam_degree,
				'exam_id':attend_line.exam_id.id,
				'main':False,
			})


	def create_marksheet_line(self,student):
		for rec in self:
			marksheet_line_id = self.env['marksheet.line']
			student_id = self.env['uni.student'].browse(student)
			marksheet_line_id = marksheet_line_id.create({
				'student_id': student,
				'marksheet_reg_id': rec.id,
				'year_id': self.exam_id.academic_year_id.id,
				'level_id': self.level_id.id,
				'semester_id': self.semester_id.id,
				'program_id': self.program_id.id,
				'batch_id': self.batch_id.id,
			})
			return marksheet_line_id


	def create_main_attend_lines(self,student,marksheet_line_id,main_student_dict):
		lines = marksheet_line_id.attendees_line
		for main_student in main_student_dict:
			if main_student == student:
				array = []
				for attend_line in main_student_dict[main_student]:
					for line in lines:
						if attend_line.subject.id != line.subject.id:
							if attend_line.subject_status != 'substitutional':
								if attend_line not in array:
									array.append(attend_line)

				self.create_attend(array,marksheet_line_id)


	def action_validate(self):
		self.state = 'validated'

	def act_cancel(self):
		self.state = 'cancelled'

	def act_draft(self):
		for line in self.marksheet_line.attendees_line:
			if not line.main:
				line.unlink()
		for line in self.marksheet_line.attendees_line:
			line.marksheet_line_id = False
		self.marksheet_line.unlink()
		self.state = 'draft'
